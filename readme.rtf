{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Sources:\
\
Unpack shader code:\
https://kbalentertainment.wordpress.com/2013/11/27/tutorial-cel-shading-with-libgdx-and-opengl-es-2-0-using-post-processing/\
\
I did not use this page for too much, but from it I got the way points are sampled, and the depth pack/unpack function.\
\
I adapted a few shader methods to my situation, as this is for OpenGL es 2.0.\
\
Real time rendering - Third edition\
Haines, Hoffman, Akenine-Moller\
\
I used this for the algorithm and information, it helped me understand where I was going in some places, but I didn\'92t use it too much either.\
\
Class code:\
I used this for skeleton code of how I should initialize frame buffers and draw them, mainly.\
\
GDC Guilty Gear Xrd talk:\
https://www.youtube.com/watch?v=yhGjCzxJV3E\
Absolutely beautiful cel shaded game with a detailed talk on how they cel shaded.\
Used for knowledge of the shading.\
\
Most other sources were just various short articles I took no code from, and only really took various API calls out of (WebGL and alpha, etc)\
\
What I wrote:\
First, I chose to do this project in WebGL because it had a lot of framebuffer techniques and other things that led into advanced graphic topics (Multipass rendering, G-Buffer, Deferred shading). Although ThreeJS would have been easier and much more productive, I wanted to learn more than just typing a few functions. What I wrote for it was the following:\
Shader for Depth buffer, shader for outline processing (adapted kind of), several different draw methods, a few short lines in the lighting shader\
\
Other than the skeleton code, the only part I took directly from something else was the pack and unpack methods for the depth buffer. I adapted the image detection a good amount, but it didn\'92t originally come from me. The rest I wrote myself. It isn\'92t THAT much code, but doing it in WebGL over ThreeJS caused me to scrap my work a few times by not backing up my code, and there were several bugs in rendering two things in the same place because WebGL handles alpha unexpectedly.}